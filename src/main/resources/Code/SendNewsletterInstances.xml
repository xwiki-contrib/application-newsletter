<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>Code</web>
  <name>SendNewsletterInstances</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>Scheduler.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1392299317000</creationDate>
  <date>1392299317000</date>
  <contentUpdateDate>1392299317000</contentUpdateDate>
  <version>1.1</version>
  <title>SendNewsletterInstances</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.0</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.RequiredRightClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <level>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>level</name>
        <number>1</number>
        <picker>0</picker>
        <prettyName>level</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <sort>none</sort>
        <unmodifiable>0</unmodifiable>
        <validationMessage/>
        <validationRegExp/>
        <values>edit|programming</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </level>
    </class>
    <name>Code.SendNewsletterInstances</name>
    <number>0</number>
    <className>XWiki.RequiredRightClass</className>
    <guid>f7c1ac2f-2747-4b1c-80f3-c4b31adbd5f1</guid>
    <property>
      <level>programming</level>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.SchedulerJobClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <contextDatabase>
        <disabled>0</disabled>
        <name>contextDatabase</name>
        <number>9</number>
        <prettyName>Job execution context database</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextDatabase>
      <contextLang>
        <disabled>0</disabled>
        <name>contextLang</name>
        <number>8</number>
        <prettyName>Job execution context lang</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextLang>
      <contextUser>
        <disabled>0</disabled>
        <name>contextUser</name>
        <number>7</number>
        <prettyName>Job execution context user</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </contextUser>
      <cron>
        <disabled>0</disabled>
        <name>cron</name>
        <number>5</number>
        <prettyName>Cron Expression</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </cron>
      <jobClass>
        <disabled>0</disabled>
        <name>jobClass</name>
        <number>3</number>
        <prettyName>Job Class</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobClass>
      <jobDescription>
        <disabled>0</disabled>
        <name>jobDescription</name>
        <number>2</number>
        <prettyName>Job Description</prettyName>
        <rows>10</rows>
        <size>45</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </jobDescription>
      <jobName>
        <disabled>0</disabled>
        <name>jobName</name>
        <number>1</number>
        <prettyName>Job Name</prettyName>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </jobName>
      <script>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>script</name>
        <number>6</number>
        <prettyName>Job Script</prettyName>
        <rows>10</rows>
        <size>60</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </script>
      <status>
        <disabled>0</disabled>
        <name>status</name>
        <number>4</number>
        <prettyName>Status</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </status>
    </class>
    <name>Code.SendNewsletterInstances</name>
    <number>0</number>
    <className>XWiki.SchedulerJobClass</className>
    <guid>76d59c86-198f-4509-8ab6-1462804e4343</guid>
    <property>
      <contextDatabase>xwiki</contextDatabase>
    </property>
    <property>
      <contextLang>fr</contextLang>
    </property>
    <property>
      <contextUser>xwiki:XWiki.Admin</contextUser>
    </property>
    <property>
      <cron>0 0 12 * * ?</cron>
    </property>
    <property>
      <jobClass>com.xpn.xwiki.plugin.scheduler.GroovyJob</jobClass>
    </property>
    <property>
      <jobDescription/>
    </property>
    <property>
      <jobName>Send Newsletter Instances</jobName>
    </property>
    <property>
      <script>import com.xpn.xwiki.api.*;
import com.xpn.xwiki.doc.*;
import com.xpn.xwiki.pdf.api.PdfExport;
import com.xpn.xwiki.pdf.api.PdfExport.ExportType;
import com.xpn.xwiki.pdf.impl.*;
import com.xpn.xwiki.web.Utils;
import org.xwiki.velocity.VelocityManager;
import org.slf4j.LoggerFactory;
import com.xpn.xwiki.web.*;

parameters = new HashMap&lt;String, String&gt;();

def LOGGER = LoggerFactory.getLogger("Newsletter");
// the maximum number of emails sent between 1 minute pauses (to avoid the mail server being blacklisted)
def MAX_COUNT = 10;
//Object Monitor 
def lock = new java.lang.Object () ; 
// get all instances that have been published
def instances = xwiki.search("select doc.fullName from XWikiDocument as doc, BaseObject as obj, IntegerProperty published where doc.space='LettreInformationInstances' and doc.fullName=obj.name and obj.className='Code.NewsletterInstanceClass' and published.id.id=obj.id and published.name='published' and published.value='1'")
def latestInvoicesSent = new HashMap&lt;String, Integer&gt;();
// context is already the private variable
//def context = xcontext.getContext();
def msgTool = context.getMessageTool();
// count the number of mails to avoid being blacklisted
def count = 0;

def urlFactory = new PdfURLFactory();
urlFactory.init(context);
context.setURLFactory(urlFactory);

// hide the pdf toc in pdfhtmlheader.vm with a fake request
def fakeRequest = new XWikiServletRequest(new XWikiServletRequestStub() {
  private parameters = [pdftoc: "1", pdfcover: "0", pdftemplate: "Code.NewsLetterPDFTemplate"];
  public String getParameter(String s) {
    LOGGER.warn("[Newsletter] Param: " + s + "=" + this.parameters.get(s));
    return this.parameters.get(s);
  }
  public String getCharacterEncoding() {
    return "";
  }
});


LOGGER.warn("[Newsletter] Number of all invoices (invoiceDate empty or not): " + instances.size());
for(String instanceName: instances) {
  def instanceDoc = xwiki.getDocument(instanceName);
  def instanceObj = instanceDoc.getObject('Code.NewsletterInstanceClass');
  def invoiceProperty = instanceObj.getProperty('invoiceDate');
  def descriptionProp = instanceObj.getProperty('description');
  def description = "";
  if(descriptionProp != null &amp;&amp; descriptionProp.value != null) {
    description = instanceDoc.getRenderedContent(descriptionProp.value, instanceDoc.getSyntax().toIdString());
  }
  // get only published instances with an empty invoice date
  if(invoiceProperty ==  null || invoiceProperty.getValue() == null) {
    def instanceTitle = instanceDoc.getDisplayTitle();
    def newsletter = instanceDoc.getParent();
    def newsletterDoc = xwiki.getDocument(newsletter);
    def newsletterObj = newsletterDoc.getObject('Code.NewsletterClass');
    def newsletterDescription = newsletterObj.getProperty('description');
    // use the newsletter description when the instance is empty
    if((description == null || description.equals("")) &amp;&amp; newsletterDescription != null &amp;&amp; newsletterDescription.value != null) {
      description = newsletterDoc.getRenderedContent(newsletterDescription.value, newsletterDoc.getSyntax().toIdString());
    }
    // get all active subscribers for the instance
    def subscribers = xwiki.search("select profile.fullName from XWikiDocument as profile, BaseObject user, BaseObject subscription, StringProperty newsletter, IntegerProperty active where profile.space='XWiki' and profile.fullName=subscription.name and subscription.className='Code.SubscriptionClass' and newsletter.id.id=subscription.id and newsletter.name='newsletter' and newsletter.value='$newsletterDoc' and user.className='XWiki.XWikiUsers' and user.name=profile.fullName and active.id.id=user.id and active.name='active' and active.value='1'")
    LOGGER.warn("Number of subscribers for $instanceName ($newsletterDoc): " + subscribers.size());
    for(String profileName: subscribers) {
      LOGGER.warn( "[Newsletter] Send $instanceName to $profileName ");
      def profileDoc = xwiki.getDocument(profileName);
      def profileObj = profileDoc.getObject('XWiki.XWikiUsers');
      def receiver = "";
      if(profileObj)
        receiver = profileObj.getProperty("email").value;
      def managementLink = '&lt;a href="' + profileDoc.getExternalURL('view', 'category=newsletter')+ '"&gt;' + msgTool.get('newsletter.managementLink') + '&lt;/a&gt;';
      def htmlContent = description + "&lt;br/&gt;" + managementLink;
      def textContent = description + " " + msgTool.get('newsletter.managementLink') + ':' + xwiki.getURL(profileName, 'view', 'category=newsletter');
      if(receiver != null &amp;&amp; !receiver.equals("")) {
        //send newsletter
        def sender = xwiki.getXWikiPreference("admin_email");
        def sent = 0;
        def result = null;
        def doc = instanceDoc.getDoc();
        def attachments = new ArrayList&lt;Attachment&gt;();
/*
        doc.setAsContextDoc(context);
        // Synchronize the Velocity context from the execution context and from the XWiki context.
        def vcontext = Utils.getComponent(VelocityManager.class).getVelocityContext();
        // setAsContextDoc doesn't set cdoc, which is used in pdf.vm
        if (vcontext != null) {
          vcontext.put("cdoc", vcontext.get("doc"));
        }
        vcontext.put("request", fakeRequest);
        context.put("vcontext", vcontext);
          
        def gcontext = context.get("gcontext");
        if (gcontext != null) {
          gcontext.put("cdoc", gcontext.get("doc"));
        }

        URL fakeURL = new URL(urlFactory.getServerURL(context).toString());
        context.setURL(fakeURL);
        context.setRequest(fakeRequest); // for pdftemplate parameter which has to be put in the context request unlike the other 2 params
        def output = new ByteArrayOutputStream();
        new PdfExportImpl().exportToPDF(doc, output, context);
        result = new ByteArrayInputStream(output.toByteArray());
        def instanceAttachment = new XWikiAttachment();
        if(result != null) {
          instanceAttachment.setContent(result);
          def attachmentName = "newsletter";
          if(instanceTitle != null &amp;&amp; !instanceTitle.equals("")) {
            attachmentName = instanceTitle;
          }
          instanceAttachment.setFilename(javax.mail.internet.MimeUtility.encodeText(attachmentName) + ".pdf");
          def apiAttachment = new Attachment(instanceDoc, instanceAttachment, context);
          attachments.add(apiAttachment);
        }
        count = count + 1;
        if (count &gt; MAX_COUNT) {
          count = 0;
          synchronized( lock ) {
            try {
             lock.wait( 60000 );
            } 
            catch(Exception ex) {
            }
          }
        } */
        sent = xwiki.mailsender.sendHtmlMessage(sender, receiver, null, null, instanceTitle, htmlContent, textContent, attachments);
        LOGGER.warn("[Newsletter] Status for sending $instanceName to $receiver: $sent (0 on success, -1 on failure).");
        if(latestInvoicesSent.get(newsletter) == null) {
          latestInvoicesSent.put(newsletter, 1);
        } else {
          def newValue = latestInvoicesSent.get(newsletter) + 1;
          latestInvoicesSent.put(newsletter, newValue);
        }
      } else {
        LOGGER.warn("No email available for $profileName");
      }
    } //each subscriber
    //set invoice date after sending all emails
    def invoiceDate = ""
    if(invoiceProperty != null) {
      if(invoiceProperty.value == null || invoiceProperty.value.equals("")) {
        def currentDate =  new Date();
        instanceDoc.set("invoiceDate", currentDate);
        instanceDoc.save("Updating invoice date", true)
        LOGGER.warn("[Newsletter] Set Invoice date: $currentDate");
      } else {
        LOGGER.warn("[Newsletter] Already set invoice date " + invoiceProperty.value);
      }
    } else {
      def currentDate =  new Date();
      instanceDoc.set("invoiceDate", currentDate);
      instanceDoc.save("Updating invoice date", true)
      LOGGER.warn("[Newsletter] Missing invoice property (invoiceProperty is null), new invoice date: $currentDate");
    }
  } else {
    if(invoiceProperty != null) {
      LOGGER.debug("[Newsletter] Cannot publish newsletter $instanceName that was already invoiced: " + invoiceProperty.value);
    }
  }
}
// set the number of invoiced sent
LOGGER.warn("Update latestInvoicesSent on each newsletter: " + latestInvoicesSent.size());
for(String key: latestInvoicesSent.keySet()) {
  def newsletterDoc = xwiki.getDocument(key);
  def newsletterObj = newsletterDoc.getObject('Code.NewsletterClass');
  def newInvoicesValue = latestInvoicesSent.get(key); 
  LOGGER.warn("Update $key with the latestInvoicesSent: $newInvoicesValue");
  newsletterObj.set("latestInvoicesSent", newInvoicesValue);
  newsletterDoc.save("Updating the lastest invoices sent", true);    
}</script>
    </property>
    <property>
      <status>Normal</status>
    </property>
  </object>
  <content>{{include document="XWiki.SchedulerJobSheet"/}}</content>
</xwikidoc>
